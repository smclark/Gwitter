#!/usr/bin/python
# -*- coding: utf-8 -*-
### BEGIN LICENSE
# This file is in the public domain
### END LICENSE

import sys
import os
import gtk
import gobject

# Add project root directory (enable symlink, and trunk execution).
PROJECT_ROOT_DIRECTORY = os.path.abspath(
    os.path.dirname(os.path.dirname(os.path.realpath(sys.argv[0]))))
#AUTH_FILE_PATH = "%s/data/auth_token" % PROJECT_ROOT_DIRECTORY

if (os.path.exists(os.path.join(PROJECT_ROOT_DIRECTORY, 'gwitter'))
    and PROJECT_ROOT_DIRECTORY not in sys.path):
    sys.path.insert(0, PROJECT_ROOT_DIRECTORY)
    os.putenv('PYTHONPATH', PROJECT_ROOT_DIRECTORY) # for subprocesses

#Import Dialogs
from gwitter import (AboutGwitterDialog, 
                     PreferencesGwitterDialog,
                     AuthDialog)
from gwitter.helpers import get_builder

import gettext
from gettext import gettext as _
gettext.textdomain('gwitter')

#Import Oauth Stuff
from oauth import oauth
from gwitter.oauthtwitter import OAuthApi


class GwitterWindow(gtk.Window):
    __gtype_name__ = "GwitterWindow"
    # To construct a new instance of this method, the following notable 
    # methods are called in this order:
    # __new__(cls)
    # __init__(self)
    # finish_initializing(self, builder)
    # __init__(self)
    #
    # For this reason, it's recommended you leave __init__ empty and put
    # your inialization code in finish_intializing

    ##Put class level stuff here

    AUTH_FILE_PATH = "%s/data/auth_token" % PROJECT_ROOT_DIRECTORY
    MAX_TWEET_LENGTH = 140
    CONSUMER_SECRET = "mMffapJI2JllKDJVLNbhSPKZXKFKo7GehjiR6wUyHE"
    CONSUMER_KEY = "CJOVn3Hxg7XECnxLChLqA"
    USER_TOKEN = ""
    USER_SECRET = ""

    def __new__(cls):
        """Special static method that's automatically called by Python when 
        constructing a new instance of this class.
        
        Returns a fully instantiated GwitterWindow object.
        """
        builder = get_builder('GwitterWindow')
        new_object = builder.get_object("gwitter_window")
        new_object.finish_initializing(builder)
        return new_object

    def finish_initializing(self, builder):
        """Called while initializing this instance in __new__

        finish_initalizing should be called after parsing the UI definition
        and creating a GwitterWindow object with it in order to finish
        initializing the start of the new GwitterWindow instance.
        
        Put your initilization code in here and leave __init__ undefined.
        """
        # Get a reference to the builder and set up the signals.
        self.builder = builder
        self.builder.connect_signals(self)


        # Uncomment the following code to read in preferences at start up.
        #dlg = PreferencesGwitterDialog.PreferencesGwitterDialog()
        #self.preferences = dlg.get_preferences()

        # Code for other initialization actions should be added here.
        self.authWithTwitter()
        self.populateFriendTree()

    def populateFriendTree(self):
        """Method will retrieve all of the friends linked to the uers account.
        It will then put each of the screen_names from the users friends list 
        into a list and populate the treeview with this list model"""
        
        self.tree_store = gtk.TreeStore( gobject.TYPE_STRING,
                                         gobject.TYPE_BOOLEAN )
        # places the global people data into the list
        # we form a simple tree.
        self.friends = self.twitter.GetFriends()
        self.tree = self.builder.get_object("rel_tree")
        self.temp_list = []
        for t in self.friends:
            self.temp_list.append(t)
        for k in self.temp_list:
            parent = self.tree_store.append( None, (k["screen_name"], None) )       
        #self.view = Display.make_view( self.tree_store )
        self.tree.set_model(self.tree_store)            
        self.renderer = gtk.CellRendererText()
        # Connect column0 of the display with column 0 in our list model
        # The renderer will then display whatever is in column 0 of
        # our model .
        self.column0 = gtk.TreeViewColumn("Buddies", self.renderer, text=0)
        self.tree.append_column( self.column0 )

    def authWithTwitter(self):
        """Method will try to see if token is saved (for the moment in a plain
           text file, and use it.  If the file is not found the user is asked to
           authorise the application"""
        #if file exists, read from it, else pop up auth
        if (os.path.exists(self.AUTH_FILE_PATH)):
            try:
                auth_file = open(self.AUTH_FILE_PATH, "r")
                self.USER_TOKEN = auth_file.readline().rsplit(":")[1].rsplit("\n")[0].strip()
                self.USER_SECRET = auth_file.readline().rsplit(":")[1].rsplit("\n")[0].strip()
                auth_file.close()
                self.twitter = OAuthApi(self.CONSUMER_KEY, 
                                              self.CONSUMER_SECRET,
                                              self.USER_TOKEN,
                                              self.USER_SECRET)
            except IOError as (errno, strerror):
                print "I/O error in gwitter.py {0}): {1}".format(errno, strerror)
            finally:
                if (auth_file != None):
                    try:                
                        auth_file.close()
                        auth_file = None
                    except Exception:
                        pass
        else:
            #Run auth dialog
            auth = AuthDialog.AuthDialog()
            auth.set_oauth_details(self.CONSUMER_KEY, self.CONSUMER_SECRET)
            response = auth.run()
            if response == gtk.RESPONSE_OK:
                #Key's been created, call method again to extract from file
                self.authWithTwitter()

    def about(self, widget, data=None):
        """Display the about box for gwitter."""
        about = AboutGwitterDialog.AboutGwitterDialog()
        response = about.run()
        about.destroy()

    def preferences(self, widget, data=None):
        """Display the preferences window for gwitter."""
        prefs = PreferencesGwitterDialog.PreferencesGwitterDialog()
        response = prefs.run()
        if response == gtk.RESPONSE_OK:
            # Make any updates based on changed preferences here.
            pass
        prefs.destroy()

    def quit(self, widget, data=None):
        """Signal handler for closing the GwitterWindow."""
        self.destroy()

    def on_destroy(self, widget, data=None):
        """Called when the GwitterWindow is closed."""
        # Clean up code for saving application state should be added here.
        gtk.main_quit()

    #All code for button interactions to go below this comment:
    
    def cursor_changed_clicked(self, widget, data=None):
        self.friend_timeline = self.builder.get_object("main_feed_TV")
        self.buffer = gtk.TextBuffer()
        self.test = self.tree.get_cursor()   
        self.friend_num = self.test[0][0]
        self.sel_friend = self.temp_list[self.friend_num]
        self.name_lol = str(self.sel_friend["screen_name"])
        self.timeline = self.twitter.GetUserTimeline({"screen_name" :self.name_lol,"count":10})
        for t in self.timeline:
            self.feed_text = t["text"]     
            self.buffer.insert_at_cursor(self.name_lol + ":\n " + self.feed_text + "\n\n")
            self.friend_timeline.set_buffer(self.buffer)

    def search_btn_clicked(self, widget, data=None):
        """Called whenever the search button is clicked. Method should be here to 
        either open a new window with the results in it or post results to the 
        main_feed_TV. Choices choices"""
        # Method to handle search here.
        search_text = self.get_text("txt_search")
        print search_text

    def tweet_btn_clicked(self,widget, data=None):
        """Called when the Tweet button is clicked. This should call a method that 
        will upload the text from the tweet_text box and post it to the current users
        twitter page using OAuth"""
        tweet_text = self.get_text("txt_tweet") 
        
        #double check the length and go.
        if (len(tweet_text) <= 140):    
            self.twitter.UpdateStatus(tweet_text)   
            status_label = self.builder.get_object("status_lbl")
            #clear the text box and update the status
            self.builder.get_object("txt_tweet").set_text("")
            my_tweet_bufffer = self.builder.get_object("personal_tweet_buffer")
            iters = my_tweet_bufffer.get_end_iter()
            my_tweet_bufffer.insert(iters, "%s\n\n" % tweet_text)
        else:
            status_label = self.builder.get_object("status_lbl")
            status_label.set_text("Too long: Tweet != Blog -__-")
        print tweet_text

    def btn_unfollow_clicked(self, widget, data=None):
        """Called when the user wants to unfollow another user and has pressed 
        the unfollow button in the account management area. Should probably present the
        user with a combo box style list with all the people they follow on it."""
        print "unfollow clicked"

    def btn_follow_clicked(self, widget, data=None):
        """Bring up a new window that the user can enter the details of the person
        they want to follow in. Either email address or username"""
        print "follow clicked"
        #Going to put random stuff here.
        

    # Random Methods go here:

    def get_text(self, caller):
        """This method will determine which caller has asked to retrieve text 
        from one of the textboxes on the GUI. Depending on who called it will
        return the text from that text box."""
        
        if caller == "txt_search":
            search_text = self.builder.get_object("txt_search").get_text()
            return search_text
        elif caller == "txt_tweet":
            tweet_text = self.builder.get_object("txt_tweet").get_text()            
            return tweet_text


    def update_tweet_count(self, widget, character, num_chars, data=None):
        """Every time the tweet box has text inserted or deleted, this method is
           called.  We calculate how many characters the user has left."""
        tweet_length = len(widget.get_text())
        status_label = self.builder.get_object("status_lbl")
        status_label.set_text("%d characters left" % (self.MAX_TWEET_LENGTH - tweet_length))

        #if user goes over limit, change the bgcolour of the entry box        
        if (tweet_length > self.MAX_TWEET_LENGTH):
            widget.modify_base(gtk.STATE_NORMAL, gtk.gdk.color_parse("#c67171"))
        else:
            widget.modify_base(gtk.STATE_NORMAL, gtk.gdk.color_parse("white"))

#Class for friends going here:
class Friend():   
    
    def __init__(self):
        name=""

    def set_details(self, dic):
        name = dic["screen_name"]
        location = dic["location"]
        status = dic["status"]
        status_text = status["text"]
        print status_text
        print "User:",name  
        print "location:",location

    def get_screen_name(self):
        return name

    def set_screen_name(self, in_name):
        name = in_name

if __name__ == "__main__":
    # Support for command line options.
    import logging
    import optparse
    parser = optparse.OptionParser(version="%prog %ver")
    parser.add_option(
        "-v", "--verbose", action="store_true", dest="verbose",
        help=_("Show debug messages"))
    (options, args) = parser.parse_args()

    # Set the logging level to show debug messages.
    if options.verbose:
        logging.basicConfig(level=logging.DEBUG)
        logging.debug('logging enabled')
    
    # Run the application.
    window = GwitterWindow()
    window.show()
    gtk.main()
